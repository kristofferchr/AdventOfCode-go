// Code generated by aocgen; DO NOT EDIT.
package year2023

import (
	"strconv"
	"strings"
)

type Day02 struct{}

func (p Day02) PartA(lines []string) any {
	var validGameIds []int
	for _, line := range lines {
		if line == ""{
			continue
		}

		parts := strings.Split(line, ":")
		game := strings.Split(parts[0], " ")[1]
		sets := strings.Split(parts[1], ";")
		if isGameValid(sets) {
			gameId,err := strconv.Atoi(strings.TrimSpace(strings.ReplaceAll(game, "Game ", "")))
			if err != nil {
				panic(err)
			}

			validGameIds = append(validGameIds, gameId)
		}
	}

	return sumAllSlices(validGameIds)
}
func isGameValid(sets []string)bool {
	amountOfColors := map[string]int {
		"blue"	: 14,
		"green": 13,
		"red": 12,
	}

	for _, set := range sets {
		drawnColors := strings.Split(set, ", ")
		for _, colorAmount := range drawnColors {
			amountAndColor := strings.Split(strings.TrimSpace(colorAmount), " ")
			amount,err := strconv.Atoi(amountAndColor[0])
			if err != nil {
				panic(err)
			}

			color := amountAndColor[1]
			totalAmount := amountOfColors[color]
			if amount > totalAmount {
				return false
			}
		}

	}

	return true
}

func (p Day02) PartB(lines []string) any {
	powerOfLeastCubesForAllGames := []int{}
	for _, line := range lines {
		if line == "" {
			continue
		}

		parts := strings.Split(line, ":")
		sets := strings.Split(parts[1], ";")

		maxAmountOfColors := map[string]int{}
		for _, set := range sets {
			drawnColors := strings.Split(set, ", ")
			for _, colorAmount := range drawnColors {
				amountAndColor := strings.Split(strings.TrimSpace(colorAmount), " ")
				amount,err := strconv.Atoi(amountAndColor[0])
				if err != nil {
					panic(err)
				}

				color := amountAndColor[1]

				currentMaxAmountOfColor,exists := maxAmountOfColors[color]
				if !exists {
					maxAmountOfColors[color] = amount
					continue
				}

				if amount > currentMaxAmountOfColor {
					maxAmountOfColors[color] = amount
				}

			}
		}
		blueAmount := maxAmountOfColors["blue"]
		greenAmount := maxAmountOfColors["green"]
		redAmount := maxAmountOfColors["red"]
		powerOfLeastCubesForAllGames = append(powerOfLeastCubesForAllGames, blueAmount*redAmount*greenAmount)
	}

	return sumAllSlices(powerOfLeastCubesForAllGames)
}
