// Code generated by aocgen; DO NOT EDIT.
package year2023

import (
	"regexp"
	"strconv"
)

type Day01 struct{}

func (p Day01) PartA(lines []string) any {
	return sumAllDigitsForLines(lines, getFirstAndLastDigit)
}

func sumAllDigitsForLines(lines []string,digitResolverFn func (line string) int) int {
	digits := []int{}
	for _, line := range lines {
		if line == "" {
			continue
		}

		digits = append(digits,digitResolverFn(line))
	}

	return sumAllSlices(digits)
}

func sumAllSlices(sliceOfInts []int) int {
	sum := 0
	for _, digit := range sliceOfInts {
		sum += digit
	}
	return sum
}

func isSingleDigit(char string) bool {
	return regexp.MustCompile("\\d").MatchString(string(char))
}
func getFirstAndLastDigit(line string) int {
	var firstDigit string
	var lastDigit string
	for _, char := range line {
		if isSingleDigit(string(char)) {
			if firstDigit == "" {
				firstDigit = string(char)
				continue
			}

			lastDigit = string(char)
		}
	}

	if lastDigit == "" {
		lastDigit = firstDigit
	}
	finalCombinedDigitInt,err := strconv.Atoi(firstDigit + lastDigit)
	if err != nil {
		panic(err)
	}
	return finalCombinedDigitInt
}

func getFirstAndLastDigitWithText(line string) int {
	firstDigit := ""
	lastDigit := ""
	//lastIndexOfMatch := -1
	for index, char := range line {
		if isSingleDigit(string(char)) {
			//lastIndexOfMatch = index

			if firstDigit == "" {
				firstDigit = string(char)
				continue
			}

			lastDigit = string(char)
			continue
		}


		digitString := ""
		for j := 0;j<index;j++ {
			digitStringPossible := line[j:index + 1]
			possibleInt := getIntFromDigitText(digitStringPossible)
			if possibleInt != 0 {
				 digitString = strconv.Itoa(possibleInt)
			}
		}

		if digitString != "" {
			if firstDigit == "" {
				firstDigit = digitString
			}
			//lastIndexOfMatch = index
			lastDigit = digitString
		}
	}

	if lastDigit == "" {
		lastDigit = firstDigit
	}
	finalCombinedDigitInt,err := strconv.Atoi(firstDigit + lastDigit)
	if err != nil {
		panic(err)
	}
	return finalCombinedDigitInt
}

func getIntFromDigitText(value string) int {
	switch value {
	case "one": return 1
	case "two": return 2
	case "three": return 3
	case "four": return 4
	case "five": return 5
	case "six": return 6
	case "seven": return 7
	case "eight": return 8
	case "nine": return 9
	default: return 0
	}
}

func (p Day01) PartB(lines []string) any {
	return sumAllDigitsForLines(lines, getFirstAndLastDigitWithText)
}
