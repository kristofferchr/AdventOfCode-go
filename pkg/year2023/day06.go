// Code generated by aocgen; DO NOT EDIT.
package year2023

import (
	"strconv"
	"strings"
)

type Day06 struct{}

type Race struct {
	Time int
	RecordDistance int
}

func (p Day06) PartA(lines []string) any {
	times := strings.Fields(strings.TrimPrefix(lines[0], "Time: "))
	distances := strings.Fields(strings.TrimPrefix(lines[1], "Distance: "))

	return getMultipleOfAllAmountsToWin(times, distances)
}

func getMultipleOfAllAmountsToWin(times []string, distances []string) any {
	amountOfCombinationsToWin := []int{}
	for _, _ = range times {
		amountOfCombinationsToWin = append(amountOfCombinationsToWin, 0)
	}

	for i := 0; i < len(times); i++ {
		time, _ := strconv.Atoi(times[i])
		recordDistance, _ := strconv.Atoi(distances[i])

		timeAndDistanceCombinations := map[int]int{}
		for holdButtonTime := 0; holdButtonTime <= time; holdButtonTime++ {
			remainingTime := time - holdButtonTime
			speed := holdButtonTime
			timeAndDistanceCombinations[holdButtonTime] = speed * remainingTime
		}

		for _, distance := range timeAndDistanceCombinations {
			if distance > recordDistance {
				if len(amountOfCombinationsToWin) != i+1 {

				}
				amountOfCombinationsToWin[i]++
			}
		}
	}

	mulitple := 1
	for _, amount := range amountOfCombinationsToWin {
		mulitple = mulitple * amount
	}

	return mulitple
}

func (p Day06) PartB(lines []string) any {
	times := strings.ReplaceAll(strings.TrimPrefix(lines[0], "Time: "), " " , "")
	distances := strings.ReplaceAll(strings.TrimPrefix(lines[1], "Distance: ")," ","")
	return getMultipleOfAllAmountsToWin([]string{times}, []string{distances})
}
