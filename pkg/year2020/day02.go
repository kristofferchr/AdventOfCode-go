// Code generated by aocgen; DO NOT EDIT.
package year2020

import (
	"strconv"
	"strings"
)

type Day02 struct{}

type PasswordPolicy struct {
	Character rune
	Least int
	Most int
}

// NewPasswordPolicy creates a new PasswordPolicy from raw policy.
// raw is on the form 1-3 a, where 1 is least, 3 is most and a is character
func NewPasswordPolicy(raw string) PasswordPolicy {
	parts := strings.Split(raw," " )
	leastAndMost := strings.Split(parts[0], "-")
	least,err := strconv.Atoi(leastAndMost[0])
	if err != nil {
		panic(err)
	}

	most,err := strconv.Atoi(leastAndMost[1])
	if err != nil {
		panic(err)
	}

	character := parts[1]

	return PasswordPolicy{
		Character: rune(character[0]),
		Least:     least,
		Most:      most,
	}

}
func (p PasswordPolicy) IsPasswordValid(password string) bool {
	amountOfChars := 0
	for _, char := range password {
		if char == p.Character {
			amountOfChars++
		}
	}

	if amountOfChars < p.Least {
		return false
	}

	if amountOfChars > p.Most {
		return false
	}

	return true
}

func (p Day02) PartA(lines []string) any {
	amountOfValidPasswords := 0
	for _, policyAndPassword := range lines {
		if policyAndPassword == "" {
			continue
		}

		parts := strings.Split(policyAndPassword, ":")
		policyRaw := parts[0]
		password := parts[1]
		policy := NewPasswordPolicy(policyRaw)
		if policy.IsPasswordValid(password) {
			amountOfValidPasswords++
		}
	}

	return amountOfValidPasswords
}

func (p Day02) PartB(lines []string) any {
	return "implement_me"
}
