// Code generated by aocgen; DO NOT EDIT.
package year2021

import "strconv"

type Day01 struct{}

func (p Day01) PartA(lines []string) any {
	var countIncMeasurement = 0
	var previousDepth int = 0
	depths := stringSliceToIntSlice(lines)
	for _, depth := range depths {
		if previousDepth != 0 && depth > previousDepth {
			countIncMeasurement += 1
		}

		previousDepth = depth
	}

	return countIncMeasurement
}

func (p Day01) PartB(lines []string) any {
	var countIncMeasurement = 0
	var previousDepth int = 0

	depths := stringSliceToIntSlice(lines)

	slidingWindow := SlidingWindow{}
	for _, depth := range depths {
		slidingWindow.AddNewDepth(depth)
		computedDepthSliding := slidingWindow.Value()

		if computedDepthSliding == 0  {
			continue
		}

		if previousDepth != 0 && computedDepthSliding > previousDepth {
			countIncMeasurement += 1
		}

		previousDepth = computedDepthSliding
	}

	return countIncMeasurement
}

type SlidingWindow struct {
	window []int
}

func (w *SlidingWindow) AddNewDepth(depth int) {
	if len(w.window) < 3 {
		w.window = append(w.window, depth)
		return
	}

	w.window = append(w.window[1:], depth)
	return
}

func (w *SlidingWindow) Value() int {
	if len(w.window) != 3{
		return 0
	}

	var sum int
	for _,value  := range w.window {
		sum += value
	}
	return sum
}

func stringSliceToIntSlice(input []string) []int {
	var result []int

	for _, line := range input {
		if len(line) == 0 {
			continue
		}

		depth, err := strconv.Atoi(line)
		if err != nil {
			panic("Malformed input found non int")
		}

		result = append(result, depth)
	}

	return result
}